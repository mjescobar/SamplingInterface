
function [inf]=getInformation(input,use)
if ~exist('use','var'), use=0; end
handles = load(input,'-mat');
if strcmp('print',use)
    if strcmp(handles.mode,'Presentation')
        inf = char('Time of background',' ',['Color: [' ...
            num2str(handles.presentation.r) ',' num2str(handles.presentation.g)...
            ',' num2str(handles.presentation.b) ']'],['Time expected: '...
            num2str(handles.presentation.time) ' [ms]']);
    else
            inf = char(['Mode: ' handles.mode]);
        if ~strcmp(handles.mode,'White noise')
            inf = char(inf,'',['Images directory: ' handles.img.directory],...
                ['Initial file: ' handles.img.nInitial],['Final file: ' handles.img.nFinal],...
                ['Number of files: ' num2str(handles.img.files)]);
            if handles.img.background.isImg
                inf = char(inf,['Image as frame background: ' handles.img.background.imgName]);
            else
            inf = char(inf,['Frame background: [' num2str(handles.img.background.r) ','...
                num2str(handles.img.background.g) ',' num2str(handles.img.background.b) ']']);
            end
        end
        if handles.bottomBar.is
            inf = char(inf, ['Has bottom bar with color[' num2str(handles.bottomBar.r) ...
                ',' num2str(handles.bottomBar.g) ',' num2str(handles.bottomBar.b) ...
                '] position[' num2str(handles.bottomBar.posLeft) ',' ...
                num2str(handles.bottomBar.posTop) ',' num2str(handles.bottomBar.posRight) ...
                ',' num2str(handles.bottomBar.posBottom) '], base levels of ['...
                num2str(handles.bottomBar.baseR) ',' num2str(handles.bottomBar.baseG) ',' ...
                num2str(handles.bottomBar.baseB) '] and ' num2str(handles.bottomBar.division)...
                ' divisions']);
        else
            inf = char(inf, 'Has no bottom bar');
        end
        if handles.beforeStimulus.is
            inf = char(inf, ' ',['Has image before stimulus with background color: ['...
                num2str(handles.beforeStimulus.background.r) ',' ...
                num2str(handles.beforeStimulus.background.g) ',' ...
                num2str(handles.beforeStimulus.background.b) ']']);
            if handles.beforeStimulus.bar.is
                inf = char(inf,['Includes a bottom bar: color[' ...
                    num2str(handles.beforeStimulus.bar.r) ',' ...
                    num2str(handles.beforeStimulus.bar.g) ',' ...
                    num2str(handles.beforeStimulus.bar.b) '] position[' ...
                    num2str(handles.beforeStimulus.bar.posLeft) ',' ...
                    num2str(handles.beforeStimulus.bar.posTop) ',' ...
                    num2str(handles.beforeStimulus.bar.posRight) ',' ...
                    num2str(handles.beforeStimulus.bar.posBottom) ']']);
            end
            if handles.beforeStimulus.rest
                inf = char(inf,['Time of presentation: ' ...
                    num2str(handles.beforeStimulus.time) ...
                    ' [ms] subtracted to the previous background']);
            else
                inf = char(inf,['Time of presentation: ' ...
                    num2str(handles.beforeStimulus.time) ...
                    ' [ms] not subtracted to the previous background']);
            end
        end
        if strcmp(handles.mode,'Flicker')
            inf = char(inf,' ','Flicker properties:',['Frequency: '...
                num2str(handles.flicker.fps)],['Duty cicle: ' ...
                num2str(handles.flicker.dutyCicle)],['Image repetition: ' ...
                num2str(handles.flicker.repetitions)]);
            if handles.flicker.img.is
                inf = char(inf,['Background image: ' handles.flicker.img.name]);
            else
                inf = char(inf,['Background color: ['...
                num2str(handles.flicker.r) ',' num2str(handles.flicker.g) ','...
                num2str(handles.flicker.b) ']']);
            end
            inf = char(inf,' ',['Total time expected: ' ...
                datestr(datenum(0,0,0,0,0,handles.flicker.time),'HH:MM:SS.FFF')]);
        elseif strcmp(handles.mode,'Only stimulus (fps)'),
            inf = char(inf,' ','Only Stimulus properties:',['Frames per second: '...
                num2str(handles.onlyStimulus.fps)],['Image repetition: ' ...
                num2str(handles.onlyStimulus.repetitions)]);
            inf = char(inf,' ',['Total time expected: ' ...
            datestr(datenum(0,0,0,0,0,handles.onlyStimulus.time),'HH:MM:SS.FFF')]);
        else
            inf = char(inf,' ','White noise properties:',['Frames per second: '...
                num2str(handles.whitenoise.fps)],['Frame blocks: ' ...
                num2str(handles.whitenoise.blocks)],['Pixels per block, X axis: ' ...
                num2str(handles.whitenoise.pxX)],['Pixels per block, Y axis: ' ...
                num2str(handles.whitenoise.pxY)]);
            
            switch handles.whitenoise.type,
                case 'BW', inf = char(inf, 'Used black and white white noise');
                case 'BB', inf = char(inf, 'Used black and blue white noise');
                case 'BG', inf = char(inf, 'Used black and green white noise');
                case 'BC', inf = char(inf, 'Used black and cyan white noise');
                case 'BBGC', inf = char(inf, 'Used black, green, blue and cyan white noise');
                case 'BY', inf = char(inf, 'Used black and yellow white noise');
                case 'BLG', inf = char(inf, 'Used blue and green white noise');
                otherwise, inf = char(inf, 'Used black and white white noise');
            end
            
            inf = char(inf,' ',['Total time expected: ' ...
            datestr(datenum(0,0,0,0,0,handles.whitenoise.time),'HH:MM:SS.FFF')]);
        end
    end
else
    inf.mode = handles.mode;
    inf.list = handles.list;
    inf.img = handles.img;
    inf.bottomBar = handles.bottomBar;
    inf.beforeStimulus = handles.beforeStimulus;
    inf.flicker = handles.flicker;
    inf.onlyStimulus = handles.onlyStimulus;
    inf.presentation = handles.presentation;
    inf.experiments = handles.experiments;
    inf.screens = handles.screens;
    inf.time = handles.time;
    inf.whitenoise = handles.whitenoise;
    inf.modify = handles.modify;
end

